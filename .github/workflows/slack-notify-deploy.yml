name: Deploy with Slack Notifications
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-deploy-notify:
    runs-on: ubuntu-latest
    steps:
      # Stage 1: Checkout and Setup
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Stage 2: Notify deployment start
      - name: Notify Deployment Start
        if: github.ref == 'refs/heads/main'
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{
              "text": "⏳ **${{ github.repository }}** deployment started\n🌿 Branch: ${{ github.ref_name }}\n📝 Commit: ${{ github.sha }} by ${{ github.actor }}\n🔗 ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }' \
            "${{ secrets.SLACK_WEBHOOK_DEPLOY }}"

      # Stage 3: Build
      - name: Build Project
        run: |
          if [ -f "package.json" ]; then
            npm ci
            npm run build
          else
            echo "No package.json found, skipping npm build"
          fi

      # Stage 4: Docker Build and Push
      - name: Build and Push Docker Image
        if: github.ref == 'refs/heads/main'
        run: |
          # Build Docker image
          docker build -t registry.jclee.me/${{ github.repository }}:${{ github.sha }} .
          docker tag registry.jclee.me/${{ github.repository }}:${{ github.sha }} registry.jclee.me/${{ github.repository }}:latest
          
          # Login to registry
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login registry.jclee.me -u admin --password-stdin
          
          # Push images
          docker push registry.jclee.me/${{ github.repository }}:${{ github.sha }}
          docker push registry.jclee.me/${{ github.repository }}:latest

      # Stage 5: Deploy via Portainer Webhook
      - name: Deploy to Production
        if: github.ref == 'refs/heads/main'
        id: deploy
        run: |
          echo "Starting deployment..."
          RESPONSE=$(curl -s -w "%{http_code}" -X POST "${{ secrets.PORTAINER_WEBHOOK_PROD_URL }}")
          HTTP_CODE="${RESPONSE: -3}"
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "deployment_status=success" >> $GITHUB_OUTPUT
            echo "✅ Deployment webhook successful"
          else
            echo "deployment_status=failed" >> $GITHUB_OUTPUT
            echo "❌ Deployment webhook failed with HTTP $HTTP_CODE"
            exit 1
          fi

      # Stage 6: Wait and Verify Deployment
      - name: Wait for Deployment
        if: github.ref == 'refs/heads/main' && steps.deploy.outputs.deployment_status == 'success'
        run: |
          echo "Waiting 60 seconds for deployment to complete..."
          sleep 60

      # Stage 7: Check Grafana Logs for Errors
      - name: Check Error Logs
        if: github.ref == 'refs/heads/main'
        id: error_check
        run: |
          echo "Checking Grafana logs for errors..."
          
          # Query Grafana for recent errors
          ERROR_RESPONSE=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_TOKEN }}" \
            "https://grafana.jclee.me/api/datasources/proxy/1/loki/api/v1/query" \
            -G \
            -d "query={job=\"docker\"} |= \"ERROR\"" \
            -d "limit=50")
          
          # Check if errors were found
          ERROR_COUNT=$(echo "$ERROR_RESPONSE" | jq -r '.data.result | length // 0')
          
          if [ "$ERROR_COUNT" -gt 0 ]; then
            echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
            echo "has_errors=true" >> $GITHUB_OUTPUT
            echo "⚠️ Found $ERROR_COUNT errors in logs"
          else
            echo "error_count=0" >> $GITHUB_OUTPUT
            echo "has_errors=false" >> $GITHUB_OUTPUT
            echo "✅ No errors found in logs"
          fi

      # Stage 8: Health Check
      - name: Health Check
        if: github.ref == 'refs/heads/main' && steps.deploy.outputs.deployment_status == 'success'
        id: health_check
        run: |
          # Extract project name from repository
          PROJECT_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          HEALTH_URL="https://${PROJECT_NAME}.jclee.me/health"
          
          echo "Checking health endpoint: $HEALTH_URL"
          
          # Try health check (allow failure)
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_URL" || echo "000")
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "health_status=healthy" >> $GITHUB_OUTPUT
            echo "✅ Health check passed"
          else
            echo "health_status=unhealthy" >> $GITHUB_OUTPUT
            echo "⚠️ Health check failed with HTTP $HTTP_CODE"
          fi

      # Stage 9: Notify Success
      - name: Notify Deployment Success
        if: github.ref == 'refs/heads/main' && steps.deploy.outputs.deployment_status == 'success'
        run: |
          PROJECT_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          DURATION=$((SECONDS / 60))
          
          MESSAGE="✅ **$PROJECT_NAME** deployment successful
          🕐 Duration: ${DURATION}m
          📝 Commit: ${{ github.sha }}
          🌿 Branch: ${{ github.ref_name }}
          👤 By: ${{ github.actor }}
          🔗 https://${PROJECT_NAME}.jclee.me"
          
          # Add error warning if found
          if [ "${{ steps.error_check.outputs.has_errors }}" = "true" ]; then
            MESSAGE="$MESSAGE
          ⚠️ ${{ steps.error_check.outputs.error_count }} errors detected in logs"
          fi
          
          # Add health status
          if [ "${{ steps.health_check.outputs.health_status }}" = "healthy" ]; then
            MESSAGE="$MESSAGE
          💚 Health check: OK"
          else
            MESSAGE="$MESSAGE
          🔴 Health check: Failed"
          fi
          
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "{\"text\": \"$MESSAGE\"}" \
            "${{ secrets.SLACK_WEBHOOK_DEPLOY }}"

      # Stage 10: Notify Failure
      - name: Notify Deployment Failure
        if: failure() && github.ref == 'refs/heads/main'
        run: |
          PROJECT_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          
          MESSAGE="❌ **$PROJECT_NAME** deployment FAILED
          🕐 Time: $(date '+%Y-%m-%d %H:%M:%S')
          📝 Commit: ${{ github.sha }}
          👤 By: ${{ github.actor }}
          🔗 View logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          🚨 Manual intervention required"
          
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "{\"text\": \"$MESSAGE\"}" \
            "${{ secrets.SLACK_WEBHOOK_DEPLOY }}"
          
          # Also notify general channel for critical failures
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "{\"text\": \"🚨 CRITICAL: $PROJECT_NAME deployment failed - immediate attention required\"}" \
            "${{ secrets.SLACK_WEBHOOK_GENERAL }}"

      # Stage 11: PR Notifications
      - name: Notify PR Events
        if: github.event_name == 'pull_request'
        run: |
          PROJECT_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          
          if [ "${{ github.event.action }}" = "opened" ]; then
            EMOJI="📝"
            ACTION="opened"
          elif [ "${{ github.event.action }}" = "closed" ] && [ "${{ github.event.pull_request.merged }}" = "true" ]; then
            EMOJI="🔀"
            ACTION="merged"
          else
            EMOJI="🔄"
            ACTION="${{ github.event.action }}"
          fi
          
          MESSAGE="$EMOJI **$PROJECT_NAME** PR #${{ github.event.pull_request.number }} $ACTION
          📝 ${{ github.event.pull_request.title }}
          👤 By: ${{ github.event.pull_request.user.login }}
          🔗 ${{ github.event.pull_request.html_url }}"
          
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "{\"text\": \"$MESSAGE\"}" \
            "${{ secrets.SLACK_WEBHOOK_DEPLOY }}"